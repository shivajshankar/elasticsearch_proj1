name: Deploy to K3s (Search Namespace)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 -d > ~/.kube/config
          kubectl config use-context default-context
          
      - name: Create/Update Elasticsearch secret
        env:
          ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
          KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-$ELASTIC_PASSWORD}
        run: |
          # Create or update the secret with both passwords
          kubectl create secret generic elasticsearch-secrets \
            --namespace=search \
            --from-literal=ELASTIC_PASSWORD="$ELASTIC_PASSWORD" \
            --from-literal=KIBANA_SYSTEM_PASSWORD="$KIBANA_SYSTEM_PASSWORD" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Elasticsearch
        run: |
          echo "Deploying Elasticsearch..."
          kubectl apply -n search -f deploy/k8s/elasticsearch.yaml
          
          # Wait for Elasticsearch to be ready
          kubectl wait --for=condition=ready pod -l app=elasticsearch -n search --timeout=300s
          
          # Get Elasticsearch pod name
          ES_POD=$(kubectl get pods -n search -l app=elasticsearch -o jsonpath='{.items[0].metadata.name}')
          
          # Wait for Elasticsearch to be responsive
          echo "Waiting for Elasticsearch to be responsive..."
          kubectl exec -n search $ES_POD -- bash -c 'until curl -s http://localhost:9200/; do sleep 5; done'
          
          # Set the kibana_system password with retries
          echo "Setting kibana_system password..."
          kubectl exec -n search $ES_POD -- bash -c '
            for i in {1..5}; do
              if curl -s -u elastic:$ELASTIC_PASSWORD -X POST "http://localhost:9200/_security/user/kibana_system/_password" \
                -H "Content-Type: application/json" \
                -d "{\"password\":\"$KIBANA_SYSTEM_PASSWORD\"}"; then
                echo "Successfully set kibana_system password"
                exit 0
              fi
              echo "Attempt $i/5 failed, retrying in 5 seconds..."
              sleep 5
            done
            echo "Failed to set kibana_system password after 5 attempts"
            exit 1
          '

          # Verify the kibana_system password was set
          echo "Verifying kibana_system password..."
          kubectl exec -n search $ES_POD -- bash -c '
            if curl -s -u "kibana_system:$KIBANA_SYSTEM_PASSWORD" http://localhost:9200/; then
              echo "✅ Successfully verified kibana_system password"
              exit 0
            else
              echo "❌ Failed to verify kibana_system password"
              exit 1
            fi'

      - name: Create/Update Kibana secret
        env:
          ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
          KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-$ELASTIC_PASSWORD}
          ENCRYPTION_KEY: ${{ secrets.KIBANA_ENCRYPTION_KEY || '' }}
        run: |
          # Use provided encryption key or generate a new one
          if [ -z "$ENCRYPTION_KEY" ]; then
            ENCRYPTION_KEY=$(openssl rand -hex 32)
            echo "##[warning] Generated new encryption key. Please add KIBANA_ENCRYPTION_KEY to GitHub Secrets for persistence"
          fi
          
          kubectl create secret generic kibana-secrets \
            --namespace=search \
            --from-literal=KIBANA_SYSTEM_PASSWORD="$KIBANA_SYSTEM_PASSWORD" \
            --from-literal=ENCRYPTION_KEY="$ENCRYPTION_KEY" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Kibana
        run: |
          echo "Deploying Kibana..."
          kubectl apply -n search -f deploy/k8s/kibana.yaml

      - name: Verify deployments
        run: |
          echo "Deployment status:"
          kubectl get pods -n search
          
          echo -e "\nService status:"
          kubectl get svc -n search
          
          echo -e "\nKibana logs:"
          kubectl logs -n search -l app=kibana --tail=50 || echo "Could not get Kibana logs"
